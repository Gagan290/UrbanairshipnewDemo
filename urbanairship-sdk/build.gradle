version = airshipProperties.version
group = "com.urbanairship.android"
description = "Urban Airship Android SDK"

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// For test coverage reports
apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26

        buildConfigField "String", "URBAN_AIRSHIP_VERSION", "\"${project.version}\""
        consumerProguardFiles 'consumer-proguard.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

configurations {
    doclava
}

dependencies {
    // Required
    compile "com.android.support:support-v4:${airshipProperties.supportLibVersion}"
    compile "com.android.support:support-annotations:${airshipProperties.supportLibVersion}"
    compile "com.google.android.gms:play-services-gcm:${airshipProperties.playServicesVersion}"

    // Optional
    compile "com.android.support:cardview-v7:${airshipProperties.supportLibVersion}"
    provided "com.google.android.gms:play-services-location:${airshipProperties.playServicesVersion}"
    provided "com.android.support:appcompat-v7:${airshipProperties.supportLibVersion}"
    provided files('libs/amazon-device-messaging-1.0.1.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    doclava("com.google.doclava:doclava:1.0.6")
}

android.libraryVariants.all { variant ->

    // Add a javadoc task for each variant
    task("javadoc${variant.name.capitalize()}", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        title = null
        source = variant.javaCompile.source

        // The classpaths are not fully available until after assemble task
        doFirst {
            classpath += variant.javaCompile.classpath
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        options {
            docletpath = configurations.doclava.files.asType(List)
            doclet "com.google.doclava.Doclava"
            bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
            addStringOption "hdf project.name", "Urban Airship Android Library"
            addStringOption "hdf project.version", project.version
            addStringOption "apiversion", "v2"
            addStringOption "federate android", "http://developer.android.com/reference"
            addStringOption "federationxml android", "docs/android-22.xml"
            addStringOption "templatedir", "docs/template"
        }
    }
}

android {
    testOptions {
        unitTests.all {
            def enabled_sdks = "18"
            if (project.hasProperty("sdks")) {
                enabled_sdks = sdks
            }
            systemProperty 'robolectric.enabledSdks', enabled_sdks
        }
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId project.group
                artifactId 'urbanairship-sdk'

                // Add your description here
                name project.name
                description project.description
                url 'https://github.com/urbanairship/android-library'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
                    connection 'https://github.com/urbanairship/android-library.git'
                    url 'https://github.com/urbanairship/android-library'
                }

                developers {
                    developer {
                        name 'Urban Airship'
                    }
                }
            }

            whenConfigured { MavenPom pom ->
                pom.dependencies.each {
                    if (it.artifactId == 'play-services-location' || it.artifactId == 'cardview-v7' || it.artifactId == 'appcompat-v7') {
                        it.optional = true
                    }
                }
            }
        }
    }
}

bintray {
    if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayApiKey')) {
        // Credentials should be stored in ~/.gradle/gradle.properties
        user = bintrayUser
        key =  bintrayApiKey
    }

    configurations = ['archives']

    pkg {
        userOrg = 'urbanairship'
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/urbanairship/android-library'
        licenses = ['Apache-2.0']

        version {
            desc = project.description
            name = project.version
            released = new Date()
        }
    }
}

task bintrayUploadRelease {
    doFirst {
        bintrayUpload.repoName = 'android'
        bintrayUpload.publish = false
    }
    finalizedBy 'bintrayUpload'
}

task bintrayUploadInternal {
    doFirst {
        bintrayUpload.repoName = 'android-internal'
        bintrayUpload.publish = true
    }
    finalizedBy 'bintrayUpload'
}

task javadoc(dependsOn: 'javadocRelease')

def getDexMethodCount() {
    try {
        def dx = "${android.getSdkDirectory()}/build-tools/${android.getBuildToolsRevision()}/dx"
        def jar = "${project.buildDir}/intermediates/bundles/default/classes.jar"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "../tools/dex-method-count.sh", dx, jar
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        println(e)
        return ""
    }
}

task runDexMethodCount << {
    def count = getDexMethodCount()

    File dex = file("${project.buildDir}/dex-counts/release")
    dex.getParentFile().mkdirs()
    dex.text = "Dex Method Count: ${count}"
    println("Dex Method Count: ${count}")
}

project.afterEvaluate {
    runDexMethodCount.dependsOn(assembleRelease)
    bintrayUpload.dependsOn(assembleRelease)
}
